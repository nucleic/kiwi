name: Continuous Integration
on:
  schedule:
    - cron: '0 0 * * 2'
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    paths:
      - .github/workflows/ci.yml
      - "benchmarks/**"
      - "kiwi/**"
      - "py/**"
      - setup.py
      - pyproject.toml

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9']
    steps:
      - uses: actions/checkout@v4
      - name: Get history and tags for SCM versioning to work
        run: |
          git fetch --prune --unshallow
          git fetch --depth=1 origin +refs/tags/*:refs/tags/*
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r lint_requirements.txt
          pip install -e .
      - name: Formatting
        if: always()
        run: |
          ruff format py --check
      - name: Linting
        if: always()
        run: |
          ruff check py
      - name: Typing
        if: always()
        # We test twice to ensure the type annotations are properly installed
        run: |
          mypy py
          cd py/tests
          mypy .
  benchmark:
    name: C++ Benchmark
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
          sudo apt-get install -y g++-11
      - name: Build and run benchmark (C++11)
        run: cd benchmarks && ./build_and_run_bench.sh
      - name: Build and run benchmark (C++20)
        env:
          CXX_COMPILER: g++-11
          CXX_FLAGS: -std=c++20
        run: cd benchmarks && ./build_and_run_bench.sh
  tests:
    name: Unit tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12', '3.13', 'pypy-3.8', 'pypy-3.9', 'pypy-3.10']
        exclude:
          - python-version: '3.8'
            os: macos-latest
          - python-version: '3.9'
            os: macos-latest
          - python-version: 'pypy-3.8'
            os: macos-latest
        include:
          # Only test free threading on ubuntu latest due to setup-python availability
          - os: ubuntu-latest
            python-version: '3.13t'
    steps:
      - uses: actions/checkout@v4
      - name: Get history and tags for SCM versioning to work
        run: |
          git fetch --prune --unshallow
          git fetch --depth=1 origin +refs/tags/*:refs/tags/*
  
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        if: matrix.python-version != '3.13t'
        with:
          python-version: ${{ matrix.python-version }}

      # Remove once the main setup-python adds python free threading
      - name: Set up Python ${{ matrix.python-version }}
        uses: deadsnakes/action@6c8b9b82fe0b4344f4b98f2775fcc395df45e494  # v3.1.0
        if: matrix.python-version == '3.13t'
        with:
          python-version: '3.13'
          nogil: true

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
      - name: Install project
        env:
          CPPFLAGS: --coverage
        run: |
          pip install .
      - name: Test with pytest
        run: |
          pip install pytest
          python -X dev -m pytest py -W error
      - name: Generate C++ coverage reports
        if: (github.event_name != 'schedule' && matrix.os != 'windows-latest')
        run: |
          bash -c "find . -type f -name '*.gcno' -exec gcov -pb --all-blocks {} +" || true
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: (github.event_name != 'schedule' && matrix.os != 'windows-latest')
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true
